name: Build and Package Python Script
on:
  push:
    branches:
      - main

env:
  version: "${{ github.run_number }}"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build directory
        run: |
          pyinstaller --onedir --noupx --noconsole --add-data "config/config.json;config" main.py

      - name: Download signing certificate
        shell: pwsh
        run: |
          $certificate = "${{ secrets.SIGNING_CERTIFICATE }}"
          [System.IO.File]::WriteAllBytes("signing_certificate.pfx", [System.Convert]::FromBase64String($certificate))

      - name: Sign the application
        run: |
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.20348.0\x64\signtool.exe" /f signing_certificate.pfx /p "${{ secrets.SIGNING_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 dist/main.exe

      - name: Rename output folder with version
        shell: pwsh
        run: |
          Write-Host "Renaming build folder to include version: ${{ env.version }}"
          Rename-Item -Path "dist/main" -NewName "local-profile-manager_v${{ env.version }}"

      - name: Zip build folder
        shell: pwsh
        run: |
          $zipPath = "dist/local-profile-manager_v${{ env.version }}.zip"
          Compress-Archive -Path "dist/local-profile-manager_v${{ env.version }}" -DestinationPath $zipPath
          Write-Host "Created zip: $zipPath"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release v${{ env.version }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/local-profile-manager_v${{ env.version }}.zip
          asset_name: local-profile-manager_v${{ env.version }}.zip
          asset_content_type: application/octet-stream